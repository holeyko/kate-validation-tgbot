package bot;


import config.Config;
import handler.UpdateHandler;
import handler.exception.HandleException;
import handler.impl.*;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendDocument;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import service.InlineButtonBuilder;
import service.InlineKeyboardMarkupBuilder;
import service.ReplyKeyboardMarkupBuilder;

import java.util.List;

public class Bot extends TelegramLongPollingBot {
    public static class ExecutionService {
        private final TelegramLongPollingBot bot;

        private ExecutionService(TelegramLongPollingBot bot) {
            this.bot = bot;
        }

        public void executeMessage(SendMessage sendMessage) throws TelegramApiException {
            bot.execute(sendMessage);
        }

        public void executeMessage(SendMessage sendMessage, String parseMode) throws TelegramApiException {
            sendMessage.setParseMode(parseMode);
            bot.execute(sendMessage);
        }

        public void executeDocument(SendDocument sendDocument) throws TelegramApiException {
            bot.execute(sendDocument);
        }
    }

    private final String token;
    private final String name;
    private final ExecutionService executionService;

    public Bot(String token) {
        this.token = token;
        this.name = Config.BOT_NAME;
        this.executionService = new ExecutionService(this);
    }


    @Override
    public void onUpdateReceived(Update update) {
        if (update == null || !update.hasMessage()) {
            System.err.println("Handle hasn't message");
        } else {
            UpdateHandler handler;
            String messageText = update.getMessage().getText();

            if (messageText.equals("/start") || messageText.equals("/help")) {
                handler = new StartHandler(executionService);
            } else if (messageText.equals(Buttons.CHECK_SUBSCRIBED.getText())) {
                handler = new CheckSubscribeHandler(executionService);
                handler.setData("botToken", token);
            } else if (messageText.equals(Buttons.LESSONS.getText())) {
                handler = new LessonsHandler(executionService);
            } else if (messageText.equals(Buttons.FILE.getText())) {
                handler = new SendFileHandler(executionService);
                handler.setData("fileName", "50 –∏–¥–µ–π –∑–∏–º–Ω–∏—Ö —Ñ–æ—Ç–æ.pdf");
                handler.setData("fileText", TEXT.WINTER_DOCUMENT.getText());
            } else {
                handler = new ErrorHandler(executionService);
                handler.setData("errorText", TEXT.FAILED.getText());
            }

            try {
                handler.handleUpdate(update);
            } catch (HandleException e) {
                handler = new ErrorHandler(executionService);
                handler.setData("errorText", TEXT.FAILED.getText());

                try {
                    handler.handleUpdate(update);
                } catch (TelegramApiException ex) {
                    System.err.println(e.getMessage());
                    e.printStackTrace();
                }
            } catch (TelegramApiException e) {
                System.err.println(e.getMessage());
                e.printStackTrace();
            }
        }
    }

    @Override
    public String getBotToken() {
        return this.token;
    }

    @Override
    public String getBotUsername() {
        return this.name;
    }

    public enum Buttons {
        CHECK_SUBSCRIBED("–Ø –ø–æ–¥–ø–∏—Å–∞–Ω(–∞)"),
        FILE("–§–∞–π–ª"),
        LESSONS("–£—Ä–æ–∫–∏");

        private final String text;

        Buttons(String text) {
            this.text = text;
        }

        public String getText() {
            return text;
        }
    }

    public enum ReplyMarkups {
        CHECK_SUBSCRIBE(new ReplyKeyboardMarkupBuilder()
                .addRow(List.of(Buttons.CHECK_SUBSCRIBED.text))
                .setResizable(true)
                .build()
        ),
        TAKE(new ReplyKeyboardMarkupBuilder()
                .addRow(List.of(Buttons.FILE.getText(), Buttons.LESSONS.getText()))
                .setResizable(true)
                .build()
        );

        private final ReplyKeyboardMarkup keyboardMarkup;

        ReplyMarkups(ReplyKeyboardMarkup keyboardMarkup) {
            this.keyboardMarkup = keyboardMarkup;
        }

        public ReplyKeyboardMarkup getKeyboardMarkup() {
            return keyboardMarkup;
        }
    }

    public enum InlineMarkups {
        LESSONS(new InlineKeyboardMarkupBuilder()
                .addRow(List.of(new InlineButtonBuilder().setText("–£—Ä–æ–∫ 1").setUrl("https://youtu.be/98HQVFl_0cA").build()))
                .addRow(List.of(new InlineButtonBuilder().setText("–£—Ä–æ–∫ 2").setUrl("https://youtu.be/YqPeYdkccA0").build()))
                .addRow(List.of(new InlineButtonBuilder().setText("–£—Ä–æ–∫ 2").setUrl("https://youtu.be/-mFMWhvFyuM").build()))
                .build());
        private final InlineKeyboardMarkup keyboardMarkup;

        InlineMarkups(InlineKeyboardMarkup keyboardMarkup) {
            this.keyboardMarkup = keyboardMarkup;
        }

        public InlineKeyboardMarkup getKeyboardMarkup() {
            return keyboardMarkup;
        }
    }

    public enum TEXT {
        START("""
                –ü—Ä–∏–≤–µ—Ç–∏–∫! –≠—Ç–æ –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ @k_visual

                üéÅ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫,
                –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º–æ–π –±–ª–æ–≥‚úîÔ∏è
                                 
                <a href="https://t.me/k_visual">–ü–û–î–ü–ò–°–ê–¢–¨–°–Ø</a>
                                 
                <b>–ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å, –∂–º–∏ —Å—Ä–∞–∑—É –∫–Ω–æ–ø–∫—É ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–Ω(–∞)¬ª</b>
                """),
        PASSED_SUBSCRIBED("""
                –û—Ç–ª–∏—á–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É‚ù§Ô∏è –£ –º–µ–Ω—è –≤ –±–ª–æ–≥–µ —Ç—ã –Ω–∞–π–¥—ë—à—å –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –ø—Ä–æ –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –≤–∏–∑—É–∞–ª!

                <b>–ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –∑–∞–±–∏—Ä–∞–π —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫! –ù–∞–¥–µ—é—Å—å, –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–æ :)</b>
                
                –ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º, –ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: @k_vanova
                """),
        FAILED("""
                –û–π..–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ü•≤

                <b>–ü—Ä–æ–≤–µ—Ä—å –ø–æ–¥–ø–∏—Å–∫—É <a href="https://t.me/k_visual">–Ω–∞ –º–æ–π –±–ª–æ–≥</a> –µ—â–µ —Ä–∞–∑ –∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É</b>
                """),
        WINTER_DOCUMENT("""
                <b>–§–∞–π–ª –¥–ª—è —Å–∞–º—ã—Ö –∫—Ä–∞—Å–∏–≤—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —ç—Ç–æ–π –∑–∏–º–æ–π‚ù§Ô∏è‚ùÑÔ∏è</b>
                
                –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∏—Å—å, –∫–∞–∫–∏–µ —Ñ–æ—Ç–æ —É —Ç–µ–±—è –ø–æ–ª—É—á–∞—Ç—Å—è: @k_vanova
                """),
        LESSONS("""
                <b>–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã —Ç—Ä–∏ —É—Ä–æ–∫–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∂–µ —Å–µ–π—á–∞—Å –ø—Ä–æ–∫–∞—á–∞—Ç—å –±–ª–æ–≥üëåüèª</b>
                
                –í —É—Ä–æ–∫–∞—Ö:
                ‚ú® –∫–∞–∫ –≤–µ—Å—Ç–∏ –±–ª–æ–≥ —Ä–µ–≥—É–ª—è—Ä–Ω–æ
                ‚ú® –∫–∞–∫ –Ω–∞–π—Ç–∏ —Å–≤–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                ‚ú® –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω
                ‚ú® —Ñ–∞–π–ª –ø–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ –ª–∏—á–Ω–æ—Å—Ç–∏
                ‚ú® –º–æ—Ç–∏–≤–∞—Ü–∏—è
                
                <b>–û—Ç–∫—Ä—ã–≤–∞–π —É—Ä–æ–∫–∏ –∏ –Ω–∞—á–∏–Ω–∞–π —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–ª–∞—Å—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —É–∂–µ —Å–µ–π—á–∞—Å‚ù§Ô∏è</b>
                """),

        DO_NOT_UNDERSTAND("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.\n–ù–∞–ø–∏—à–∏—Ç–µ /start.");

        private final String text;

        TEXT(String text) {
            this.text = text;
        }

        public String getText() {
            return text;
        }
    }
}
